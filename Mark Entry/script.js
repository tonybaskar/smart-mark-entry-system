// to reset the data stored in the local storage
function resetApp() {
  document.getElementById("resetModal").style.display = "block";
}

function closeResetModal() {
  document.getElementById("resetModal").style.display = "none";
}

function confirmReset() {
  localStorage.clear();
  location.reload();
}

// header with navbar

       // Toggle mobile menu
        const mobileMenuBtn = document.querySelector('.mobile-menu');
        const mainNav = document.querySelector('.main-nav');
        
        mobileMenuBtn.addEventListener('click', () => {
            mobileMenuBtn.classList.toggle('active');
            mainNav.classList.toggle('active');
        });
        
        
        const navLinks = document.querySelectorAll('.nav-links a, .nav-btn');
        navLinks.forEach(link => {
            link.addEventListener('click', () => {
                mobileMenuBtn.classList.remove('active');
                mainNav.classList.remove('active');
            });
        });
        
        // Theme toggle function
        function toggleTheme() {
            document.body.classList.toggle('dark-theme');
            
            // Save theme preference to localStorage
            const isDarkTheme = document.body.classList.contains('dark-theme');
            localStorage.setItem('darkTheme', isDarkTheme);
        }
        
        // Check for saved theme preference
        document.addEventListener('DOMContentLoaded', () => {
            const savedTheme = localStorage.getItem('darkTheme');
            if (savedTheme === 'true') {
                document.body.classList.add('dark-theme');
            }
        });






function exportPDF() {
  try {
    if (typeof window.jspdf !== 'undefined') {
      const { jsPDF } = window.jspdf;
      const doc = new jsPDF({
        orientation: 'portrait',
        unit: 'mm',
        format: 'a4'
      });

      // Calculate statistics
      const total = students.reduce((sum, student) => sum + student.mark, 0);
      const avg = students.length ? (total / students.length).toFixed(2) : 0;

      // Header
      doc.setFont('helvetica', 'bold');
      doc.setFontSize(18);
      doc.setTextColor(40);
      doc.text(meta.schoolName || 'School Name', 105, 20, { align: 'center' });

      // Exam info
      doc.setFont('helvetica', 'normal');
      doc.setFontSize(12);
      doc.text(`Grade: ${meta.grade || 'N/A'}`, 20, 30);
      doc.text(`Present: ${meta.present || 'N/A'}`, 20, 35);
      doc.text(`Absent: ${meta.absent || 'N/A'}`, 20, 40);
      doc.text(`${meta.examType || 'N/A'}`, 105, 30, { align: 'center' });
      doc.text(`Date: ${new Date().toLocaleDateString()}`, 180, 30, { align: 'right' });
      doc.text(`Total Marks: ${meta.totalMarks || 'N/A'}`, 180, 40, { align: 'right' });

      //  student data
      const data = students.map((s, i) => [
        s.name,
        s.mark,
        i + 1,
        s.mark === 0 ? 'Absent' : 
          s.mark >= 0.9 * totalMark ? 'Excellent' :
          s.mark >= 0.75 * totalMark ? 'Good' :
          s.mark < 0.4 * totalMark ? 'Needs Improvement' : 'Average'
      ]);

      // Generate table
      let finalY;
      doc.autoTable({
        startY: 45,
        head: [['Name', 'Marks', 'Rank', 'Remarks']],
        body: data,
        headStyles: {
          fillColor: [22, 160, 133],
          textColor: [255, 255, 255],
          fontStyle: 'bold'
        },
        styles: {
          cellPadding: 3,
          fontSize: 10,
          halign: 'center',
          valign: 'middle'
        },
        columnStyles: {
          0: { halign: 'left' }
        },
        didDrawPage: (data) => {
          
          if (data.pageNumber === data.pageCount) {
            finalY = data.cursor.y;
          }
          
          doc.setFontSize(10);
          doc.setTextColor(100);
          doc.text(`Page ${data.pageNumber}`, 105, 287, { align: 'center' });
        }
      });

      
      if (finalY) {
        doc.setPage(doc.internal.getNumberOfPages()); 
        
       
        finalY += 10;
        doc.setDrawColor(200);
        doc.line(20, finalY, 190, finalY);
        finalY += 15;

      
        doc.setFillColor(240, 240, 240);
        doc.rect(50, finalY - 5, 110, 20, 'F');
        
    
        doc.setFont('helvetica', 'bold');
        doc.setTextColor(22, 160, 133);
        doc.setFontSize(12);
        doc.text(`Class Average: ${avg} / ${totalMark}`, 105, finalY, { align: 'center' });
        
      
        doc.setFontSize(10);
        doc.setTextColor(100);
        doc.text(`Total Students: ${students.length}`, 105, finalY + 8, { align: 'center' });
        
        
        // doc.text('Generated by bAsKaR\'s Digital Mark Entry System', 105, finalY + 25, { align: 'center' });
      }

      doc.save(`Student_Marks_${meta.examType || 'Report'}.pdf`);
    } else {
      alert('PDF library failed to load. Please refresh and try again.');
    }
  } catch (error) {
    console.error('PDF generation error:', error);
    alert('Error generating PDF. Check console for details.');
  }
}

// footer styles

 // Dynamic Quotes
  const educationQuotes = [
    {
      text: "Education is the most powerful weapon which you can use to change the world.",
      author: "Nelson Mandela"
    },
    {
      text: "The function of education is to teach one to think intensively and to think critically.",
      author: "Martin Luther King Jr."
    },
    {
      text: "Education is not preparation for life; education is life itself.",
      author: "John Dewey"
    },
    {
      text: "The roots of education are bitter, but the fruit is sweet.",
      author: "Aristotle"
    },
    {
      text: "Technology is just a tool. In terms of getting the kids working together and motivating them, the teacher is the most important.",
      author: "Bill Gates"
    }
  ];

  function updateQuote() {
    const randomQuote = educationQuotes[Math.floor(Math.random() * educationQuotes.length)];
    document.querySelector('.dynamic-quote').textContent = `"${randomQuote.text}"`;
    document.querySelector('.quote-author').textContent = `â€• ${randomQuote.author}`;
  }

  
  setInterval(updateQuote, 30000);
  
 
  document.querySelector('.year').textContent = new Date().getFullYear();
  

  updateQuote();